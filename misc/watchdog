#!/usr/bin/env python

import sys
import os
import time
from filelock import FileLock
import logging
from watchdog.observers import Observer
#from watchdog.events import LoggingEventHandler
#from watchdog.events import PatternMatchingEventHandler
from watchdog.events import RegexMatchingEventHandler
deploymodule=""
deploymodule="-pl 'modules/apps/MainSearch'"
deploycommand="mvn clean install "+deploymodule+" && mvn bundle-support:deploy "+deploymodule

def compile(filename): 
    time.sleep(3)
    lock=FileLock("/tmp/.watchdoglock", timeout=1)
    with lock:
        print("Lock acquired.")
        if(filename.endswith(".jsp")):
            command="find bundles/ -name "+filename.split('/')[-1]+""
            print command
            #os.system(command)
            #time.sleep(20)
        os.system(deploycommand)
        lock.release()

def on_created(event):
    print("hey, %s has been created!"%event.src_path)
    compile(event.src_path)

def on_deleted(event):
    print("what the f**k! Someone deleted %s!"%event.src_path)
    compile(event.src_path)

def on_modified(event):
    print("hey buddy, %s has been modified"%event.src_path)
    compile(event.src_path)

def on_moved(event):
    print("ok ok ok, someone moved %s to %s"%(event.src_path,event.dest_path))

if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(message)s', datefmt='%Y-%m-%d %H:%M:%S')
    path = sys.argv[1] if len(sys.argv) > 1 else '.'
    patterns = ['.*\.java$','.*\.jsp$','.*/pom\.xml$','.*/bnd\.bnd$']
    ignore_patterns = ['.*/target/.*','.*\.class']
    ignore_directories = False
    case_sensitive = True
    #event_handler = LoggingEventHandler()
    #event_handler = PatternMatchingEventHandler(patterns, ignore_patterns, ignore_directories, case_sensitive)
    event_handler = RegexMatchingEventHandler(patterns, ignore_patterns, ignore_directories, case_sensitive)
    event_handler.on_created = on_created
    event_handler.on_deleted = on_deleted
    event_handler.on_modified = on_modified
    event_handler.on_moved = on_moved
    observer = Observer()
    observer.schedule(event_handler, path, recursive=True)
    observer.start()
    try:
        while True:
            time.sleep(1)
    except KeyboardInterrupt:
        observer.stop()
    observer.join()


